import{_ as a,W as n,X as e,Z as s}from"./framework-ca8d4a1d.js";const t={},o=s(`<h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello World</h2><p>惯例，第一个程序是向屏幕输出HelloWord。</p><h4 id="_1、代码" tabindex="-1"><a class="header-anchor" href="#_1、代码" aria-hidden="true">#</a> 1、代码</h4><p>如下：<code>print(内容)</code> 函数用来将参数打印到屏幕上</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、终端执行" tabindex="-1"><a class="header-anchor" href="#_2、终端执行" aria-hidden="true">#</a> 2、终端执行</h4><p>先简单的使用cmd或shell进行执行(后期会用IDE等快捷编译执行)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ python <span class="token comment"># 进入python环境</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>print<span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 输入代码回车执行</span>
Hello World <span class="token comment"># 执行结果</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、代码的运行模式" tabindex="-1"><a class="header-anchor" href="#_3、代码的运行模式" aria-hidden="true">#</a> 3、代码的运行模式</h4><p>在终端输入一行代码，回车执行，是最快捷的运行Python代码的方式，<br> 带一次只能运行一行，可以选择将代码写入文件，然后在Python环境中执行Python文件。</p><h4 id="_4、执行python文件" tabindex="-1"><a class="header-anchor" href="#_4、执行python文件" aria-hidden="true">#</a> 4、执行Python文件</h4><p>将代码，写入一个以”.py”结尾的文件中，使用python命令去运行它</p><h6 id="_4-1-创建python文件" tabindex="-1"><a class="header-anchor" href="#_4-1-创建python文件" aria-hidden="true">#</a> 4.1 创建python文件</h6><p>创建一个名为test.py的文件，里面的内容如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 该文件只有一行代码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!!!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_4-2-执行python文件" tabindex="-1"><a class="header-anchor" href="#_4-2-执行python文件" aria-hidden="true">#</a> 4.2 执行python文件</h6><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ python ./test.py
Hello World<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解释器" tabindex="-1"><a class="header-anchor" href="#解释器" aria-hidden="true">#</a> 解释器</h2><h4 id="_1、概念" tabindex="-1"><a class="header-anchor" href="#_1、概念" aria-hidden="true">#</a> 1、概念</h4><p>解释器又称编译器，作用是将人写的代码编译成CPU可以识别的机器码。</p><h4 id="_2、编译过程" tabindex="-1"><a class="header-anchor" href="#_2、编译过程" aria-hidden="true">#</a> 2、编译过程</h4><p>编写代码-&gt;Python解析器处理-&gt;转换位机器码(0101二进制)-&gt;提交给CPU执行</p><h4 id="_3、python解释器" tabindex="-1"><a class="header-anchor" href="#_3、python解释器" aria-hidden="true">#</a> 3、Python解释器</h4><p>安装Python环境时，就安装了Python解释器(和一些内部类库)。<br> Python解释器本质是一个计算机程序，用来翻译Python代码，并提交给计算机执行。</p>`,24),d=[o];function r(i,l){return n(),e("div",null,d)}const h=a(t,[["render",r],["__file","1-3.html.vue"]]);export{h as default};
