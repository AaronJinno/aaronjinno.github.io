import{_ as n,W as a,X as s,Z as e}from"./framework-ca8d4a1d.js";const p={},t=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>无论是while循环或是for循环，都是重复性的执行特定操作，在某些场景下，我们需要借助以下关键字来跳出循环：</p><ul><li>continue：暂时跳过某次循环，直接进行下一次</li><li>break：提前退出循环不在继续</li></ul></div><h2 id="i-continue" tabindex="-1"><a class="header-anchor" href="#i-continue" aria-hidden="true">#</a> Ⅰ. continue</h2><h4 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义" aria-hidden="true">#</a> 1. 定义</h4><p>continue关键字用于：中断<mark>本次</mark>循环，直接进入下一次循环</p><ul><li>continue可用于for循环和while循环，效果一致。</li><li>continue通常配合if语句，来确定跳出本次循环的时机。</li></ul><h4 id="_2-示例" tabindex="-1"><a class="header-anchor" href="#_2-示例" aria-hidden="true">#</a> 2. 示例</h4><p>需求：打印1~10，但不打印3的倍数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-用于嵌套" tabindex="-1"><a class="header-anchor" href="#_3-用于嵌套" aria-hidden="true">#</a> 3. 用于嵌套</h4><p>continue只能控制所在代码块的循环，无法跨级控制其他层级的循环</p><h2 id="ii-break" tabindex="-1"><a class="header-anchor" href="#ii-break" aria-hidden="true">#</a> Ⅱ. break</h2><h4 id="_1-定义-1" tabindex="-1"><a class="header-anchor" href="#_1-定义-1" aria-hidden="true">#</a> 1. 定义</h4><p>break关键字用于：直接结束所在循环</p><ul><li>break可用于for循环和while循环，效果一致。</li><li>break通常配合if语句，来确定结束当前循环的时机。</li></ul><h4 id="_2-示例-1" tabindex="-1"><a class="header-anchor" href="#_2-示例-1" aria-hidden="true">#</a> 2. 示例</h4><p>需求：有100个盲盒，当开到幸运数字5，就代表中奖，停止继续开盲盒</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;第</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">次开盲盒&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;中奖了&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-用于嵌套-1" tabindex="-1"><a class="header-anchor" href="#_3-用于嵌套-1" aria-hidden="true">#</a> 3. 用于嵌套</h4><p>break如果在内层，就只能跳出当前层的循环，不能跳出外层循环。</p><p>python没有设计跳出多层循环的语法，需要自己设计。</p><ul><li>方案1：如果循环在一个方法内，可以直接return，以退出方法的形式跳出外层循环</li><li>方案2：可以设置一个flag，通过flag控制外层循环</li><li>方案3：使用else语句，在外层break</li><li>方案4：抛出异常</li></ul><p>以方案2为例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>flag <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
            flag <span class="token operator">=</span> <span class="token boolean">False</span>
            <span class="token keyword">break</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;haha&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 只打印了两次</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> flag<span class="token punctuation">:</span>
        <span class="token keyword">break</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),i=[t];function o(l,c){return a(),s("div",null,i)}const u=n(p,[["render",o],["__file","3-4.html.vue"]]);export{u as default};
