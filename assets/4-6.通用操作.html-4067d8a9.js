import{_ as n,W as s,X as a,Z as p}from"./framework-ca8d4a1d.js";const t={},e=p(`<h2 id="i-序列的切片" tabindex="-1"><a class="header-anchor" href="#i-序列的切片" aria-hidden="true">#</a> Ⅰ. 序列的切片</h2><p>序列是指：内容连续、有序，可使用下标索引的一类数据容器。<br> 列表、元组、字符串，均可以可以视为序列。</p><h4 id="_1-切片概念" tabindex="-1"><a class="header-anchor" href="#_1-切片概念" aria-hidden="true">#</a> 1. 切片概念</h4><p>序列支持切片，即：列表、元组、字符串，均支持进行切片操作<br> 切片：从一个序列中，取出一个子序列</p><h4 id="_2-切片语法" tabindex="-1"><a class="header-anchor" href="#_2-切片语法" aria-hidden="true">#</a> 2. 切片语法</h4><p>语法：<code>序列[起始下标:结束下标:步长]</code>。</p><p>表示从序列中，从指定位置开始，依次取出元素，到指定位置结束，得到一个新序列。</p><ul><li>起始下标：表示从何处开始，可以留空，留空视作从头开始</li><li>结束下标（不含）：表示何处结束，可以留空，留空视作截取到结尾</li><li>步长：表示，依次取元素的间隔 <ul><li>步长1表示，一个个取元素</li><li>步长2表示，每次跳过1个元素取</li><li>步长N表示，每次跳过N-1个元素取</li><li>步长为负数表示，反向取（注意，起始下标和结束下标也要反向标记）</li></ul></li></ul><p>PS：此操作不会影响序列本身，而是会得到一个新的序列（列表、元组、字符串）</p><h4 id="_3-切片示例" tabindex="-1"><a class="header-anchor" href="#_3-切片示例" aria-hidden="true">#</a> 3. 切片示例</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
new_list <span class="token operator">=</span> my_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>	 <span class="token comment"># 下标1开始，下标4（不含）结束，步长1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_list<span class="token punctuation">)</span>


my_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
new_tuple <span class="token operator">=</span> my_tuple<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>	 <span class="token comment"># 从头开始，到最后结束，步长1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_tuple<span class="token punctuation">)</span>		<span class="token comment"># 结果：(1, 2, 3, 4, 5)</span>


my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
new_list <span class="token operator">=</span> my_list<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>		<span class="token comment"># 从头开始，到最后结束，步长2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_list<span class="token punctuation">)</span>		<span class="token comment"># 结果：[1, 3, 5]</span>

my_str <span class="token operator">=</span> <span class="token string">&quot;12345&quot;</span>
new_str <span class="token operator">=</span> my_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>	<span class="token comment"># 从头开始，到下标4（不含）结束，步长2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_str<span class="token punctuation">)</span>  <span class="token comment"># 结果：&quot;13&quot;</span>

my_str <span class="token operator">=</span> <span class="token string">&quot;12345&quot;</span>
new_str <span class="token operator">=</span> my_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>	<span class="token comment"># 从头（最后）开始，到尾结束，步长-1（倒序）</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_str<span class="token punctuation">)</span>

my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
new_list <span class="token operator">=</span> my_list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>	<span class="token comment"># 从下标3开始，到下标1（不含）结束，步长-1（倒序）</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_list<span class="token punctuation">)</span>

my_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
new_tuple <span class="token operator">=</span> my_tuple<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> 	<span class="token comment"># 从最后开始，到下标1(不含)结束，步长-2（倒序）</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_tuple<span class="token punctuation">)</span>		<span class="token comment"># 结果：(5, 3)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-容器的遍历" tabindex="-1"><a class="header-anchor" href="#ii-容器的遍历" aria-hidden="true">#</a> Ⅱ. 容器的遍历</h2><p>5类数据容器都支持for循环遍历。<br> 列表、元组、字符串支持while循环，集合、字典不支持（无法下标索引）</p><h2 id="iii-统计功能" tabindex="-1"><a class="header-anchor" href="#iii-统计功能" aria-hidden="true">#</a> Ⅲ. 统计功能</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>统计最大最小元素时，如果值是字符串，将通过ASCII计算大小。</p></div><ul><li>len(容器)：统计容器的元素个数</li><li>max(容器)：统计容器的最大元素</li><li>min(容器)：统计容器的最小元素</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
my_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
my_str <span class="token operator">=</span> <span class="token string">&quot;aaron&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment"># 结果3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>my_tuple<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment"># 结果5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>my_str<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment"># 结果5</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment"># 结果3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>my_tuple<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment"># 结果5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>my_str<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment"># 结果r</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment"># 结果1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>my_tuple<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment"># 结果1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>my_str<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment"># 结果a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-容器转换" tabindex="-1"><a class="header-anchor" href="#iv-容器转换" aria-hidden="true">#</a> Ⅳ. 容器转换</h2><p>除了字典外，其他容器可以互相转换。</p><ul><li>list(容器)：将给定容器转换为列表</li><li>str(容器)：将给定容器转换为字符串</li><li>tuple(容器)：将给定容器转换为元组</li><li>set(容器)：将给定容器转换为集合</li></ul><h2 id="v-排序" tabindex="-1"><a class="header-anchor" href="#v-排序" aria-hidden="true">#</a> Ⅴ. 排序</h2><p>sorted(容器, [reverse=True])，将给定容器进行排序。</p><p>注意，排序后都会得到列表（list）对象。</p>`,23),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","4-6.通用操作.html.vue"]]);export{r as default};
