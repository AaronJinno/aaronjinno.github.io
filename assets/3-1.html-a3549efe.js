import{_ as n,W as s,X as a,Z as e}from"./framework-ca8d4a1d.js";const i={},t=e(`<div class="hint-container tip"><p class="hint-container-title">流程控制介绍</p><p>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。</p><p>流程控制有的三种基本流程结构，即：</p><ul><li>顺序结构：从上到下逐行执行，无任何判断和跳转。</li><li>分支结构：根据条件，选择性的执行某段代码</li><li>循环结构：根据循环条件，重复性的执行某段代码</li></ul></div><h2 id="i-if-语句" tabindex="-1"><a class="header-anchor" href="#i-if-语句" aria-hidden="true">#</a> Ⅰ. if 语句</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>if语句就是流程结构中的分支语句，通过if来判断条件，条件的值为布尔值，根据布尔值结果选择执行的分支。</p></div><h4 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h4><p>if 要判断的条件:<br>     条件成立时，执行的code。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;未成年禁止入内&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;if语句之后的代码&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 这行code与if处于同一级缩进，不属于if代码块    </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-1-if关键字" tabindex="-1"><a class="header-anchor" href="#_1-1-if关键字" aria-hidden="true">#</a> 1.1 if关键字</h5><p>if关键字开头的语句就是条件判断语句。 在python中，是通过缩进来判定代码块的归宿的，归属于if判断的代码语句块，需在前方填充4个空格缩进（一个tab）</p><h5 id="_1-2-要判断的条件" tabindex="-1"><a class="header-anchor" href="#_1-2-要判断的条件" aria-hidden="true">#</a> 1.2 要判断的条件</h5><p>判断语句的结果，必须是布尔类型True或False</p><ul><li>True会执行if内的代码语句</li><li>False则不会执行</li></ul><h4 id="_2-注意事项" tabindex="-1"><a class="header-anchor" href="#_2-注意事项" aria-hidden="true">#</a> 2. 注意事项</h4><ul><li>判断条件的结果一定要是布尔类型</li><li>不要忘记判断条件后的 <code>:</code> 引号</li><li>归属于if语句的代码块，需在前方填充4个空格缩进</li></ul><h4 id="_3-示例" tabindex="-1"><a class="header-anchor" href="#_3-示例" aria-hidden="true">#</a> 3. 示例</h4><p>需求：结合input，通过键盘输入的数字，判断是否成年</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入您的年龄：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;儿童票&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;祝您玩的愉快&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 无论什么票，都发欢迎语句</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-if-else-语句" tabindex="-1"><a class="header-anchor" href="#ii-if-else-语句" aria-hidden="true">#</a> Ⅱ. if else 语句</h2><p>else分支用来指定不满足条件时该做什么</p><h4 id="_1-语法-1" tabindex="-1"><a class="header-anchor" href="#_1-语法-1" aria-hidden="true">#</a> 1. 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>if 条件: 
    满足条件时执行的code
else:
    不满足条件时执行的code    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>else后，不需要判断条件，不满足if条件时会自动执行</li><li>和if的代码块一样，else的代码块同样需要4个空格作为缩进</li></ul><h4 id="_2-示例" tabindex="-1"><a class="header-anchor" href="#_2-示例" aria-hidden="true">#</a> 2. 示例</h4><p>需求：根据是否成年，票价不同</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入您的年龄：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;儿童票，10元&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;成人票，20元&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;祝您玩的愉快&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-if-elif-else-语句" tabindex="-1"><a class="header-anchor" href="#iii-if-elif-else-语句" aria-hidden="true">#</a> Ⅲ. if elif else 语句</h2><p>if elif else 用来实现多条件分支</p><h4 id="_1-语法-2" tabindex="-1"><a class="header-anchor" href="#_1-语法-2" aria-hidden="true">#</a> 1. 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>if 条件1:
    满足条件1时执行的code
elif 条件2:
    满足条件2时执行的code
elif 条件3:
    满足条件3时执行的code
... # 可以无限加elif条件分支   
else:
    不满足条件时执行的code    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-注意事项-1" tabindex="-1"><a class="header-anchor" href="#_2-注意事项-1" aria-hidden="true">#</a> 2. 注意事项</h4><ul><li>elif分支没有个数限制</li><li>条件是会互斥的，从上到下判断，一旦符合条件，就会执行相应的代码块，且不会再继续判断</li><li>else要放到最后，表示所有条件都不满足时的绝对可靠的兜底选项</li><li>切记空格缩进决定代码块的作用域，elif也不例外</li></ul><h4 id="_3-示例-1" tabindex="-1"><a class="header-anchor" href="#_3-示例-1" aria-hidden="true">#</a> 3. 示例</h4><p>需求：不同的分数，不同的评级。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>表示一个数字区间时，就需要用到逻辑运算符 and了。<br> python语言对此有简化，支持范围比较运算符(很多语言都不支持)<br><code>0 &lt; age and age &lt; 18</code> 简化=&gt; <code>0 &lt; age &lt;18</code></p></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>grade <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入分数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> grade <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;不及格，弱诶&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> <span class="token number">60</span> <span class="token operator">&lt;=</span> grade <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;勉强合格&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> <span class="token number">70</span> <span class="token operator">&lt;</span> grade <span class="token operator">&lt;=</span> <span class="token number">80</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;干得不错&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> <span class="token number">80</span> <span class="token operator">&lt;</span> grade <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;优秀&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;异常分数，请联系老师&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;查询结束&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v-条件语句的嵌套" tabindex="-1"><a class="header-anchor" href="#v-条件语句的嵌套" aria-hidden="true">#</a> Ⅴ. 条件语句的嵌套</h2><p>条件语句支持嵌套，先满足上一个条件，才有资格判断下一个条件。<br> 实际应用中，很多逻辑也都是嵌套的、多层次的。</p><h4 id="_1-语法-3" tabindex="-1"><a class="header-anchor" href="#_1-语法-3" aria-hidden="true">#</a> 1. 语法</h4><p>满足上一层的条件，才会判断之后的条件。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>if 第一层条件
    满足条件时执行的code
    if 第二层条件
        满足条件时执行的code
        ... # 可以继续嵌套
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-注意事项-2" tabindex="-1"><a class="header-anchor" href="#_2-注意事项-2" aria-hidden="true">#</a> 2. 注意事项</h4><ul><li>注意缩进，python是通过缩进判断第二个if是独立的if，还是从属于上一个if</li><li>没有嵌套层数的限制，但是考虑到算法的性能，嵌套超过两层，就要考虑优化代码了</li></ul><h4 id="_3-示例-2" tabindex="-1"><a class="header-anchor" href="#_3-示例-2" aria-hidden="true">#</a> 3. 示例</h4><p>需求：失业成年人领救济金</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token number">18</span>
have_job <span class="token operator">=</span> <span class="token boolean">False</span>
<span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> have_job<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;臭老鼠，这是你的救济金&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;有工作不能领救济金&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;您还是未成年，让你监护人来领吧&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;服务结束，赶紧滚&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),p=[t];function l(o,c){return s(),a("div",null,p)}const r=n(i,[["render",l],["__file","3-1.html.vue"]]);export{r as default};
