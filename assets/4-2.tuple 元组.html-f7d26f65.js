import{_ as n,W as s,X as a,Z as t}from"./framework-ca8d4a1d.js";const p={},e=t(`<div class="hint-container tip"><p class="hint-container-title">元组的意义</p><p>列表是可以修改的，如果想要传递的信息，不被篡改，列表就不合适了。<br> 元组同列表一样，都是可以封装多个、不同类型的元素在内。但最大的不同点在于：元组一旦定义完成，就不可修改。<br> 我们需要在程序内封装数据，又不希望封装的数据被篡改，那么元组就非常合适了。</p></div><h2 id="i-定义元组" tabindex="-1"><a class="header-anchor" href="#i-定义元组" aria-hidden="true">#</a> Ⅰ. 定义元组</h2><h4 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h4><p>定义元组使用小括号，且使用逗号隔开各个数据，数据可以是不同的数据类型。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>变量名 <span class="token operator">=</span> <span class="token punctuation">(</span>元素<span class="token punctuation">,</span> 元素<span class="token punctuation">,</span> 元素<span class="token punctuation">,</span> 元素<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-定义空元组" tabindex="-1"><a class="header-anchor" href="#_2-定义空元组" aria-hidden="true">#</a> 2. 定义空元组</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>变量名 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
变量名 <span class="token operator">=</span> <span class="token builtin">tuple</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-特点" tabindex="-1"><a class="header-anchor" href="#_3-特点" aria-hidden="true">#</a> 3. 特点</h4><ul><li>元组的元素可以是任意类型，包括是元组（可以嵌套）</li><li>数据是有序存储的（下标索引）</li><li>允许重复数据存在</li><li>不可以修改（增加或删除元素等）</li><li>元组即使只有一个数据，这个数据后面也要添加逗号</li></ul><h4 id="_4-示例" tabindex="-1"><a class="header-anchor" href="#_4-示例" aria-hidden="true">#</a> 4. 示例</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>  <span class="token comment"># (1, &#39;hello&#39;, 1.2, True)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;tuple&#39;&gt;</span>

t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
t3 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

t4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
t5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-元组的操作" tabindex="-1"><a class="header-anchor" href="#ii-元组的操作" aria-hidden="true">#</a> Ⅱ. 元组的操作</h2><p>元组由于不可修改的特性，所以其操作方法非常，只有取值查找和统计类的内置方法</p><h4 id="_1-根据下标取值" tabindex="-1"><a class="header-anchor" href="#_1-根据下标取值" aria-hidden="true">#</a> 1. 根据下标取值</h4><p>和list一样，元组也可以通过下标取值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-查找和统计" tabindex="-1"><a class="header-anchor" href="#_2-查找和统计" aria-hidden="true">#</a> 2. 查找和统计</h4><ul><li>index()：查找某个数据，如果数据存在返回对应的下标，否则报错 <ul><li>如果存在多个，只会返回第一次出现时的下标</li></ul></li><li>count()：统计某个数据在当前元组出现的次数</li><li>len(tuple)：统计元组内的元素个数</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-操作的注意事项" tabindex="-1"><a class="header-anchor" href="#_3-操作的注意事项" aria-hidden="true">#</a> 3. 操作的注意事项</h4><ul><li>不可以修改元组的内容，否则会直接报错</li><li>可以修改元组内的list的内容（修改元素、增加、删除、反转等） <ul><li>元组的元素可以是list，可以修改list的内容，修改内容时，list的引用地址没有改变，所以不算修改。</li><li>不可以替换list为其它list或其它类型，这样就属于改变了引用地址</li></ul></li></ul><h4 id="_4-元组的遍历" tabindex="-1"><a class="header-anchor" href="#_4-元组的遍历" aria-hidden="true">#</a> 4. 元组的遍历</h4><p>同列表一样，元组也可以被遍历，可以使用while循环和for循环遍历它。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>

index <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
    index <span class="token operator">+=</span> <span class="token number">1</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> t1<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),o=[e];function l(i,c){return s(),a("div",null,o)}const r=n(p,[["render",l],["__file","4-2.tuple 元组.html.vue"]]);export{r as default};
