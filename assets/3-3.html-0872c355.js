import{_ as n,W as a,X as s,Z as e}from"./framework-ca8d4a1d.js";const i="/img/python/base/012.png",l={},t=e('<h2 id="i-for-循环" tabindex="-1"><a class="header-anchor" href="#i-for-循环" aria-hidden="true">#</a> Ⅰ. for 循环</h2><p>Python同样提供了for循环语句，两者能完成的功能基本差不多，但仍有一些区别：</p><ul><li>while循环的循环条件是自定义的，自行控制循环条件</li><li>for循环是一种”轮询”机制，是对一批内容进行”逐个处理” <ul><li>for循环就是将”待办事项”逐个完成的循环机制</li></ul></li></ul><figure><img src="'+i+`" alt="012" tabindex="0" loading="lazy"><figcaption>012</figcaption></figure><h4 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h4><p>从待处理数据集中：逐个取出数据赋值给临时变量，赋值一次就执行一次循环体，直到数据全部取出，因此for循环也称为遍历循环。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>for 临时变量 in 待处理数据集: 
    循环满足条件时执行的代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-注意事项" tabindex="-1"><a class="header-anchor" href="#_2-注意事项" aria-hidden="true">#</a> 2. 注意事项</h4><ul><li>同while循环不同，for循环是无法定义循环条件的，只能从被处理的数据集中，依次取出内容进行处理，所以，理论上讲，Python的for循环无法构建无限循环（被处理的数据集不可能无限大） <ul><li>这点和其他语言的for循环也不同</li></ul></li><li>同样要注意缩进</li></ul><h4 id="_3-案例" tabindex="-1"><a class="header-anchor" href="#_3-案例" aria-hidden="true">#</a> 3. 案例</h4><p>需求：计算字符串中有多少个字母u</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>str1 <span class="token operator">=</span> <span class="token string">&quot;fuck you bro,you are a ugly dog&quot;</span>
letter <span class="token operator">=</span> <span class="token string">&quot;u&quot;</span>
count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> str1<span class="token punctuation">:</span>
    <span class="token keyword">if</span> x <span class="token operator">==</span> letter<span class="token punctuation">:</span>
        count <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>  <span class="token comment"># 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-变量作用域" tabindex="-1"><a class="header-anchor" href="#_4-变量作用域" aria-hidden="true">#</a> 4. 变量作用域</h4><p>for循环的临时变量，在编程规范上，作用范围（作用域），只限定在for循环内部。</p><ul><li>如果在for循环外部访问临时变量,规范上是不允许的，也不建议这样做，虽然实际上可以访问到。</li><li>如果实在需要在循环外访问循环内的临时变量，可以在循环外预先定义 。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment"># 4  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-range语句" tabindex="-1"><a class="header-anchor" href="#ii-range语句" aria-hidden="true">#</a> Ⅱ. range语句</h2><p>for循环语法中的：待处理数据集，严格来说，称之为：可迭代类型。<br> 可迭代类型指其内容可以一个个依次取出的一种类型，包括：</p><ul><li>字符串</li><li>列表</li><li>元组</li></ul><p>for循环语句，本质上是遍历：可迭代对象。</p><h4 id="_1-数字序列" tabindex="-1"><a class="header-anchor" href="#_1-数字序列" aria-hidden="true">#</a> 1. 数字序列</h4><p>除了字符串外，数字序列也是一种简单的可迭代对象（其他可迭代对象需要数据容器的前置知识）。</p><p>数字序列的语法格式如下：</p><ul><li>range(num)：获取一个从0开始，到num结束的数字序列，不含num</li><li>range(num1,num2):获得一个从num1开始，到num2结束的数字序,不含num2</li><li>range(num1, num2, step):获得一个从num1开始，到num2结束的数字序列，不含num2，数字之间的步长，以step为准（step默认为1）</li></ul><h4 id="_2-示例" tabindex="-1"><a class="header-anchor" href="#_2-示例" aria-hidden="true">#</a> 2. 示例</h4><p>需求：计算0~100，有多少个偶数<br> 算法：通过if判断，数字除以2后，余数是否为0</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token number">101</span>  <span class="token comment"># 因为range不包含本身，所以+1</span>
count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        count <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>  <span class="token comment"># 51</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-循环的嵌套" tabindex="-1"><a class="header-anchor" href="#iii-循环的嵌套" aria-hidden="true">#</a> Ⅲ. 循环的嵌套</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>for循环和while循环是可以互相嵌套的</p></div><p>同while一样，for循环也支持嵌套使用</p><h4 id="_1-语法-1" tabindex="-1"><a class="header-anchor" href="#_1-语法-1" aria-hidden="true">#</a> 1. 语法</h4><p>注意缩进，同样是通过缩进确定的层级关系</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>for 临时变量 in 数据集
    循环体

    for 临时变量 in 数据集
        循环体
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-for循环示例" tabindex="-1"><a class="header-anchor" href="#_2-for循环示例" aria-hidden="true">#</a> 2. for循环示例</h4><p>需求：连续一周，每天锻炼三次，打印每次锻炼，并计数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>count <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;这是我第</span><span class="token interpolation"><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span><span class="token string"> 次锻炼&quot;</span></span><span class="token punctuation">)</span>
        count <span class="token operator">+=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-while和for的对比" tabindex="-1"><a class="header-anchor" href="#iv-while和for的对比" aria-hidden="true">#</a> Ⅳ. while和for的对比</h2><ul><li>在循环控制上 <ul><li>while循环可以自定循环条件，并自行控制</li><li>for循环不可以自定循环条件，只可以一个个从容器内取出数据</li></ul></li><li>在无限循环上： <ul><li>while循环可以通过条件控制做到无限循环</li><li>for循环理论上不可以，因为被遍历的容器容量不是无限的</li></ul></li><li>在使用场景上： <ul><li>while循环适用于任何想要循环的场景</li><li>for循环适用于，遍历数据容器的场景或简单的固定次数循环场景</li></ul></li></ul>`,38),p=[t];function o(r,c){return a(),s("div",null,p)}const u=n(l,[["render",o],["__file","3-3.html.vue"]]);export{u as default};
