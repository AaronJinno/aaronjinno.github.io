import{_ as n,W as a,X as s,Z as e}from"./framework-ca8d4a1d.js";const t={},p=e(`<h2 id="i-函数作为参数" tabindex="-1"><a class="header-anchor" href="#i-函数作为参数" aria-hidden="true">#</a> Ⅰ. 函数作为参数</h2><p>函数本身，也可以作为参数传入另一个函数内。<br> 这是一种，计算逻辑的传递，而非数据的传递。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">count_num</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> fun<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>fun<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y


<span class="token keyword">def</span> <span class="token function">mult</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> y


count_num<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> add<span class="token punctuation">)</span>
count_num<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> mult<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-lambda函数" tabindex="-1"><a class="header-anchor" href="#ii-lambda函数" aria-hidden="true">#</a> Ⅱ. Lambda函数</h2><h4 id="l-lambda关键字" tabindex="-1"><a class="header-anchor" href="#l-lambda关键字" aria-hidden="true">#</a> l. lambda关键字</h4><ul><li>def关键字，可以定义带有名称的函数，有名称的函数，可以基于名称重复使用。</li><li>lambda关键字，可以定义匿名函数（无名称），无名称的匿名函数，只可临时使用一次。</li></ul><h4 id="_2-lambda语法" tabindex="-1"><a class="header-anchor" href="#_2-lambda语法" aria-hidden="true">#</a> 2. Lambda语法</h4><p>lambda 传入参数: 函数体(一行代码)</p><ul><li>lambda 是关键字，表示定义匿名函数</li><li>传入参数表示匿名函数的形式参数，如：x, y 表示接收2个形式参数</li><li>函数体，就是函数的执行逻辑，要注意：只能写一行，无法写多行代码</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">count_num</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> fun<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>fun<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>


count_num<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),c=[p];function l(o,i){return a(),s("div",null,c)}const d=n(t,[["render",l],["__file","5-4.匿名函数.html.vue"]]);export{d as default};
