import{_ as n,W as a,X as s,Z as e}from"./framework-ca8d4a1d.js";const t="/img/python/base/013.png",i={},p=e(`<h2 id="函数介绍" tabindex="-1"><a class="header-anchor" href="#函数介绍" aria-hidden="true">#</a> 函数介绍</h2><h4 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> 1. 概念</h4><p>函数：是组织好的，可重复使用的，用来实现特定功能的代码段。</p><ul><li>内置函数：Python语言内置的函数，可直接使用。 <ul><li>如之前用过的：input()、print()、int()、str()等</li></ul></li><li>自定义函数：自己手动定义的函数。</li><li>第三方函数：引入的他人开发的函数，避免重复造轮子。</li></ul><h4 id="_2-函数的意义" tabindex="-1"><a class="header-anchor" href="#_2-函数的意义" aria-hidden="true">#</a> 2. 函数的意义</h4><ul><li>将功能封装在函数内，可供随时随地重复利用</li><li>提高代码的复用性，减少重复代码，提高开发效率</li></ul><h2 id="创建函数" tabindex="-1"><a class="header-anchor" href="#创建函数" aria-hidden="true">#</a> 创建函数</h2><h4 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>def 函数名(参数...):
    函数体
    return 返回值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>def：必备，定义函数的关键字，函数代码块以 def 关键词开头。</li><li>函数名：必备，函数标识符名称，调用的使用要用</li><li>参数：可选，任何传入参数和自变量必须放在圆括号中间。</li><li>函数体：必备，函数的内容以冒号和缩进开始</li><li>返回值：可选，用于结束函数，并向函数调用处返回一个值</li></ul><h4 id="_2-简单示例" tabindex="-1"><a class="header-anchor" href="#_2-简单示例" aria-hidden="true">#</a> 2. 简单示例</h4><p>创建一个无参数、无返回值的简单函数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;don&#39;t touch my ass , I&#39;m real man&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-调用函数" tabindex="-1"><a class="header-anchor" href="#_3-调用函数" aria-hidden="true">#</a> 3. 调用函数</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>很多语言由于加载方式的原因，函数是可以先调用，后创建的（此时函数已经在内存里了），而Python不支持。</p></div><p>使用 <code>函数名(参数)</code> 的形式调用，可以多次调用。<br> 调用前函数必须已经声明。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>get_info<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 没有参数就不用传参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-函数命名规范" tabindex="-1"><a class="header-anchor" href="#_4-函数命名规范" aria-hidden="true">#</a> 4. 函数命名规范</h4><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h2><h4 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1.介绍</h4><p>在函数调用的时候，可以给函数传递参数，让函数执行的时候可以获取外部数据。</p><ul><li>形参：函数定义时给出的参数，用于占位</li><li>实参：函数调用时实际传入到函数的中的参数，会赋值给形参</li></ul><h4 id="_2-参数规则" tabindex="-1"><a class="header-anchor" href="#_2-参数规则" aria-hidden="true">#</a> 2. 参数规则</h4><ul><li>参数数量没有限制，可以是0个，也可以是任意N个。</li><li>参数之间使用逗号进行分割</li><li>传入参数时，默认按照顺序将实参赋值给形参</li></ul><h4 id="_3-创建带参函数" tabindex="-1"><a class="header-anchor" href="#_3-创建带参函数" aria-hidden="true">#</a> 3. 创建带参函数</h4><p>如下：创建一个计算两数之和函数.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;计算结果为：</span><span class="token interpolation"><span class="token punctuation">{</span>num1<span class="token operator">+</span>num2<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>


get_sum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># 计算结果为：30</span>
get_sum<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">)</span>  <span class="token comment"># 计算结果为：99</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h2><h4 id="_1-介绍-1" tabindex="-1"><a class="header-anchor" href="#_1-介绍-1" aria-hidden="true">#</a> 1. 介绍</h4><p>函数可以只完成一些功能，也可以返回一个值给函数的调用处。</p><h4 id="_2-return语句" tabindex="-1"><a class="header-anchor" href="#_2-return语句" aria-hidden="true">#</a> 2. return语句</h4><p>函数的返回值就是通过return语句完成的，return会将后面的值返回给函数调用处（可以用变量接收）。<br> 同时，return还表示立即退出当前函数，return后面的函数体不会执行。</p><h4 id="_3-返回值示例" tabindex="-1"><a class="header-anchor" href="#_3-返回值示例" aria-hidden="true">#</a> 3. 返回值示例</h4><p>需求：计算两数之和，并将计算结果返回</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;这行代码是不会执行的&quot;</span><span class="token punctuation">)</span>


result1 <span class="token operator">=</span> get_sum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># 返回值赋值给了变量</span>
result2 <span class="token operator">=</span> get_sum<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span>  <span class="token comment"># 30 99</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-none" tabindex="-1"><a class="header-anchor" href="#_4-none" aria-hidden="true">#</a> 4. None</h4><p>如果函数没有使用return语句返回数据，那么函数会隐式的返回一个none</p><h5 id="_4-1-定义" tabindex="-1"><a class="header-anchor" href="#_4-1-定义" aria-hidden="true">#</a> 4.1 定义</h5><p>None是Python的一个特殊字面量，其类型是：<code>&lt;class &#39;NoneType&#39;&gt;</code>。<br> 无返回值的函数，实际上就是返回了：None这个字面量。<br> None表示：空的、无实际意义的意思函数返回的None，就表示，这个函数没有返回什么有意义的内容。</p><h5 id="_4-2-return-none-示例" tabindex="-1"><a class="header-anchor" href="#_4-2-return-none-示例" aria-hidden="true">#</a> 4.2 return None 示例</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;this is my name: </span><span class="token interpolation"><span class="token punctuation">{</span>info<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>


result1 <span class="token operator">=</span> get_name<span class="token punctuation">(</span><span class="token string">&quot;Victor&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span>  <span class="token comment"># None</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;NoneType&#39;&gt;</span>

<span class="token keyword">def</span> <span class="token function">get_gender</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token boolean">None</span>


result2 <span class="token operator">=</span> get_gender<span class="token punctuation">(</span><span class="token string">&quot;male&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span>  <span class="token comment"># None</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;NoneType&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-3-none与bool" tabindex="-1"><a class="header-anchor" href="#_4-3-none与bool" aria-hidden="true">#</a> 4.3 None与bool</h5><p>在if判断中，None等同于False（和数字0一样）。</p><h5 id="_4-4-none的应用场景" tabindex="-1"><a class="header-anchor" href="#_4-4-none的应用场景" aria-hidden="true">#</a> 4.4 None的应用场景</h5><ul><li>用在函数无返回值上</li><li>用在if判断上，表示False <ul><li>函数主动返回None，然后配合if判断做相关处理</li></ul></li><li>定义变量，但暂时不需要变量有具体值，可以用None来代替</li><li>定义方法体，方法必须有方法体，可以先用return None占位</li></ul><h2 id="函数说明文档" tabindex="-1"><a class="header-anchor" href="#函数说明文档" aria-hidden="true">#</a> 函数说明文档</h2><p>为函数添加多行注释（文档注释），可以方便理解函数。</p><h4 id="_1-语法-1" tabindex="-1"><a class="header-anchor" href="#_1-语法-1" aria-hidden="true">#</a> 1. 语法</h4><p>说明文档要遵循一定的语法，才能有更好的提示。</p><ul><li>内容应写在函数体之前，一定要注意是在函数体之前，而不是函数之前</li><li>使用PyCharm，在函数内部输入三个引号，会自动补齐文档语法的关键字</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    该函数是用来计算两数之和的(这里用来写函数的整体说明)
    :param num1: 第一个数字(参数说明)
    :param num2: 第二个数字
    :return: 返回两数之和(返回值说明)
    &quot;&quot;&quot;</span>
    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-查看说明文档" tabindex="-1"><a class="header-anchor" href="#_2-查看说明文档" aria-hidden="true">#</a> 2. 查看说明文档</h4><p>使用函数时，将光标放到函数上，会显示之前定义的说明文档，如下：</p><figure><img src="`+t+'" alt="013" tabindex="0" loading="lazy"><figcaption>013</figcaption></figure>',54),l=[p];function o(c,r){return a(),s("div",null,l)}const d=n(i,[["render",o],["__file","5-1.html.vue"]]);export{d as default};
