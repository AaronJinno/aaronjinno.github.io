import{_ as s,W as n,X as a,Z as e}from"./framework-ca8d4a1d.js";const t={},p=e(`<br><div class="hint-container tip"><p class="hint-container-title">提示</p><p>字符串指的是str数据类型，他是用来表示多个字符的</p></div><h2 id="字符串定义" tabindex="-1"><a class="header-anchor" href="#字符串定义" aria-hidden="true">#</a> 字符串定义</h2><h5 id="_1-定义方式" tabindex="-1"><a class="header-anchor" href="#_1-定义方式" aria-hidden="true">#</a> 1. 定义方式</h5><p>字符串有3种不同的定义方式</p><ul><li>双引号：<code>&#39;字符串&#39;</code></li><li>单引号：<code>&quot;字符串&quot;</code></li><li>三引号：<code>&quot;&quot;&quot;字符串&quot;&quot;&quot;&quot;</code></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>str1 <span class="token operator">=</span> <span class="token string">&#39;Musk&#39;</span>
str2 <span class="token operator">=</span> <span class="token string">&quot;Fuck&quot;</span>
str3 <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;Shit
    真的可以
        换行
&quot;&quot;&quot;</span><span class="token string">&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-三引号定义法" tabindex="-1"><a class="header-anchor" href="#_2-三引号定义法" aria-hidden="true">#</a> 2. 三引号定义法</h5><p>三引号不赋值给变量，它就是注释，赋值给变量，他就变成了字符串。<br> 三引号定义法，和多行注释的写法一样，同样支持换行操作。</p><p>注意：字符串包含的范围是从三个引号开始，到下一个三个引号结束</p><h5 id="_3-字符串嵌套" tabindex="-1"><a class="header-anchor" href="#_3-字符串嵌套" aria-hidden="true">#</a> 3. 字符串嵌套</h5><p>如果想要定义的字符串本身，是包含：单引号、双引号自身就需要进行引号嵌套或者转义了。</p><ul><li>引号嵌套：单引号里可以包含双引号，双引号里可以包含单引号</li><li>可以使用转移字符（\\）来将引号解除效用，变成普通字符串</li></ul><h2 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接" aria-hidden="true">#</a> 字符串拼接</h2><p>连个字符串字面量是可以进行拼接的，用 <code>+ </code>号完成，此时 <code>+</code> 是字符串连接符。<br> 只有字符串之间可以拼接，拼接其他数据类型会报错</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>str1 <span class="token operator">=</span> <span class="token string">&quot;一个真正的&quot;</span>
str2 <span class="token operator">=</span> <span class="token string">&quot;man&quot;</span>
str3 <span class="token operator">=</span> <span class="token string">&quot;我是&quot;</span> <span class="token operator">+</span> str1 <span class="token operator">+</span> str2
<span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span>  <span class="token comment"># 我是一个真正的man</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;哎呀&quot;</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment"># 报错：TypeError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串格式化" tabindex="-1"><a class="header-anchor" href="#字符串格式化" aria-hidden="true">#</a> 字符串格式化</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>字符串格式化的语法和SQL里的预查询占位符的用法很相似</p></div><h5 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>str1 <span class="token operator">=</span> <span class="token string">&quot;Jinno&quot;</span>
message <span class="token operator">=</span> <span class="token string">&quot;%s is a dick&quot;</span> <span class="token operator">%</span> str1
<span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>  <span class="token comment"># Jinno is a dick</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;str&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上完成字符串和变量的快速拼接，其中：</p><ul><li>%：表示我要占位</li><li>s：表示将变量转换为字符串放入该位置</li></ul><p>综合来说就是：%s表示先在这里占个位置，实际的内容是 后面给出的值</p><h5 id="_2-占位符类型" tabindex="-1"><a class="header-anchor" href="#_2-占位符类型" aria-hidden="true">#</a> 2. 占位符类型</h5><p>其他数据类型的值也可以用%s进行占位，不过都会转为字符串。<br> 其实Python支持多种数据类型的占位符，可以手动指定占位符类型，如下：</p><ul><li>%s：将内容转换成字符串，放入占位位置</li><li>%d：将内容转换成整数，放入占位位置</li><li>%f：将内容转换成浮点型，放入占位位置</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>message1 <span class="token operator">=</span> <span class="token string">&quot;%s is my id&quot;</span> <span class="token operator">%</span> <span class="token string">&quot;dickman&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span>  <span class="token comment"># dickman is my id</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;str&#39;&gt;</span>

message2 <span class="token operator">=</span> <span class="token string">&quot;%d is my id&quot;</span> <span class="token operator">%</span> <span class="token number">12</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span>  <span class="token comment"># dickman is my id</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;str&#39;&gt;</span>

message3 <span class="token operator">=</span> <span class="token string">&quot;%f is my id&quot;</span> <span class="token operator">%</span> <span class="token number">12.1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>message3<span class="token punctuation">)</span>  <span class="token comment"># 12.100000 is my id is my id</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>message3<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;str&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">疑问？</p><p>如上可知，无论占位符是什么类型，拼接后都是字符串类型， 意义是是什么呢？暂时未知！</p></div><h5 id="_3-多个占位符" tabindex="-1"><a class="header-anchor" href="#_3-多个占位符" aria-hidden="true">#</a> 3. 多个占位符</h5><p>一个字符串可以有多个占位符，此时值要用括号括起来，并安装占位顺序用逗号分割值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>message <span class="token operator">=</span> <span class="token string">&quot;%s is %d years old&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">&quot;Jinno&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>  <span class="token comment"># Jinno is 20 years old</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-数字格式化的精度控制" tabindex="-1"><a class="header-anchor" href="#_4-数字格式化的精度控制" aria-hidden="true">#</a> 4. 数字格式化的精度控制</h5><p>对浮点数进行格式化时，默认会保留小数点后6位。<br> 我们也可以手动使用辅助符号 <code>m.n</code> 来控制数据的宽度和精度：</p><ul><li>m：控制宽度，要求是数字（很少使用）,设置的宽度小于数字自身，不生效</li><li>n：控制小数点精度，要求是数字，会进行小数的四舍五入</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>message1 <span class="token operator">=</span> <span class="token string">&quot;我的余额为：%.2f&quot;</span> <span class="token operator">%</span> <span class="token number">2000.139</span>
message2 <span class="token operator">=</span> <span class="token string">&quot;我的年龄：%5d&quot;</span> <span class="token operator">%</span> <span class="token number">21</span>
message3 <span class="token operator">=</span> <span class="token string">&quot;混合使用： %5.5f&quot;</span> <span class="token operator">%</span> <span class="token number">2.1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span>  <span class="token comment"># 我的余额为：2000.14</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span>  <span class="token comment"># 我的年龄：   21，前面补了3个空格</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>message3<span class="token punctuation">)</span>  <span class="token comment"># 混合使用：    2.10000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-快速格式化" tabindex="-1"><a class="header-anchor" href="#_5-快速格式化" aria-hidden="true">#</a> 5. 快速格式化</h5><p>通过语法 <code>f&quot;内容{变量}&quot;</code> 的格式来快速格式化。</p><p>注意：这种写法不做精度控制，也不理会类型，适用于快速格式化字符串</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>uname <span class="token operator">=</span> <span class="token string">&quot;Jinno&quot;</span>
message <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;我是</span><span class="token interpolation"><span class="token punctuation">{</span>uname<span class="token punctuation">}</span></span><span class="token string">,今年</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span></span><span class="token string">岁了，我的存款为：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token number">923232.3032</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>  <span class="token comment"># 我是Jinno,今年20岁了，我的存款为：923232.3032</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-格式化表达式" tabindex="-1"><a class="header-anchor" href="#_6-格式化表达式" aria-hidden="true">#</a> 6. 格式化表达式</h5><div class="hint-container tip"><p class="hint-container-title">提示</p><p>表达式：一条具有明确执行结果的代码语句<br> 例如：<br><code>1 + 1</code> 、<code>5 * 2</code> ，就是表达式，因为有具体的结果，结果是一个数字.<br> 又或者，常见的变量定义：<code>name = &quot;Jinno&quot;</code> <code>age = 11 + 11</code> 等号右侧的都是表达式呢，因为它们有具体的结果，结果赋值给了等号左侧的变量。</p></div><p>字符串格式化，除了可以格式化数据化，还可以直接格式化表达式，即将表达式的执行结果替换到占位符。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>message1 <span class="token operator">=</span> <span class="token string">&quot;1+1 = %d&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
message2 <span class="token operator">=</span> <span class="token string">&quot;\\&quot;Jinno\\&quot; 的数据类型是：%s&quot;</span> <span class="token operator">%</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">&quot;Jinno&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span>  <span class="token comment"># 1+1 = 2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span>  <span class="token comment"># &quot;Jinno&quot; 的数据类型是：&lt;class &#39;str&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43),o=[p];function i(c,l){return n(),a("div",null,o)}const u=s(t,[["render",i],["__file","2-6.html.vue"]]);export{u as default};
