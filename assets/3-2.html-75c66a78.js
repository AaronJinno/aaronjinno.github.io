import{_ as n,W as s,X as a,Z as e}from"./framework-ca8d4a1d.js";const i="/img/python/base/011.png",l={},t=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>循环语句允许我们执行一个语句或语句组多次，直到条件不再满足。</p><p>循环语句有四个重要的元素：</p><ul><li>初始化条件：循环首次执行时用于条判断的初始值</li><li>循环条件：满足条件，就会执行循环体 <ul><li>又称循环终止条件，满足条件就终止执行</li></ul></li><li>循环体：要执行的循环语句，可以是多条</li><li>迭代条件：用于修改产业条件判断的值，没有迭代条件就成死循环了</li></ul><p>循环语句分类：</p><ul><li>while循环</li><li>for循环</li></ul></div><h2 id="i-while-循环" tabindex="-1"><a class="header-anchor" href="#i-while-循环" aria-hidden="true">#</a> Ⅰ. while 循环</h2><p>while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。</p><h4 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>while 条件判断:
    条件满足时执行的语句
    迭代条件  # 一般会有迭代条件，不然可能会陷入死循环
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>while的条件需得到布尔类型，True表示继续循环，False表示结束循环。</p><h4 id="_2-注意事项" tabindex="-1"><a class="header-anchor" href="#_2-注意事项" aria-hidden="true">#</a> 2. 注意事项</h4><ul><li>一般会有迭代条件不然会陷入死循环，迭代条件是为了达成循环终止条件 <ul><li>有些场景是需要死循环的</li><li>也可以配合循环控制语句跳出循环，迭代条件不是必须的</li></ul></li><li>空格缩进和if判断一样，都需要设置</li></ul><h4 id="_3-案例" tabindex="-1"><a class="header-anchor" href="#_3-案例" aria-hidden="true">#</a> 3. 案例</h4><p>需求：计算从1加到100</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>变量在使用前必须已经声明，python中声明变量时，必须进行初始化。</p></div><ul><li>初始条件：num = 1</li><li>终止条件：num &gt; 100</li><li>迭代条件：num + 1</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 初始条件</span>
num_sum <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 储存计算结果的变量</span>
<span class="token keyword">while</span> num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>  <span class="token comment"># 迭代条件</span>
    num_sum <span class="token operator">+=</span> num <span class="token comment"># 循环体</span>
    num <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 迭代条件</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num_sum<span class="token punctuation">)</span>  <span class="token comment"># 5050</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-循环嵌套" tabindex="-1"><a class="header-anchor" href="#ii-循环嵌套" aria-hidden="true">#</a> Ⅱ. 循环嵌套</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>和条件语句类似，循环语句也是可以嵌套的，内循环将成为外循环方法体的一部分。</p><ul><li>缩进：同样，嵌套循环也是通过缩进来确定嵌套关系和代码块的归属的</li><li>层级：可以无限嵌套，但嵌套循环的复杂度是指数上升的，不要嵌套太多层</li></ul></div><h4 id="_1-语法-1" tabindex="-1"><a class="header-anchor" href="#_1-语法-1" aria-hidden="true">#</a> 1.语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>while 外层循环条件
    循环体

    while 内层循环条件
    循环体
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-案例" tabindex="-1"><a class="header-anchor" href="#_2-案例" aria-hidden="true">#</a> 2. 案例</h4><p>需求：打印99乘法表</p><div class="hint-container tip"><p class="hint-container-title">补充知识</p><p>使用print打印多行数据时，数据之间是不会对齐的，可以选择使用制表符 \\t（tab键），它可以让我们的多行字符串进行对齐。</p></div><p>提示：两层循环，外循环控制行，内循环控制列，列的数量递增</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>line <span class="token operator">=</span> <span class="token number">1</span> 
<span class="token keyword">while</span> line <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">:</span>
    column <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">while</span> column <span class="token operator">&lt;=</span> line<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot; </span><span class="token interpolation"><span class="token punctuation">{</span>column<span class="token punctuation">}</span></span><span class="token string"> x </span><span class="token interpolation"><span class="token punctuation">{</span>line<span class="token punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token punctuation">{</span>line <span class="token operator">*</span> column<span class="token punctuation">}</span></span><span class="token string">\\t&quot;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        column <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 用来换行</span>
    line <span class="token operator">+=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：<br><img src="`+i+'" alt="011" loading="lazy"></p>',23),p=[t];function o(c,r){return s(),a("div",null,p)}const u=n(l,[["render",o],["__file","3-2.html.vue"]]);export{u as default};
